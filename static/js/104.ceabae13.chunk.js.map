{"version":3,"file":"static/js/104.ceabae13.chunk.js","mappings":"uNAuDA,UAzCc,WACZ,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,MAQpB,OACE,iCACE,SAAC,IAAD,CAASC,GAAG,KAAKC,KAAK,KAAtB,yBAGA,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,iBAAkBP,EAClBQ,SAde,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBL,EAAoBI,EAApBJ,MAAOC,EAAaG,EAAbH,SACfR,GAASa,EAAAA,EAAAA,IAAM,CAAEN,MAAAA,EAAOC,SAAAA,KACxBM,EAAAA,GAAAA,QAAA,uBAA8BP,EAA9B,2BACAK,GACD,EAMG,UAKE,UAAC,IAAD,YACE,UAAC,KAAD,oBAEE,SAAC,KAAD,CAAWG,KAAK,QAAQC,UAAQ,KAChC,SAAC,KAAD,CAAYD,KAAK,QAAQE,UAAU,UAGrC,UAAC,KAAD,uBAEE,SAAC,KAAD,CAAWF,KAAK,WAAWC,UAAQ,KACnC,SAAC,KAAD,CAAYD,KAAK,WAAWE,UAAU,UAGxC,SAAC,KAAD,CAASC,KAAK,SAAd,oBACA,SAAC,KAAD,WAKT,C,4NClDYC,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sJAQXE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,+FAOTI,GAAOJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,gDAGJM,GAAaN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,+DAIVQ,EAAYR,EAAAA,GAAAA,MAAH,8EAKTS,EAAUT,EAAAA,GAAAA,OAAH,uQ,sHC5BPU,EAAoB,WAC/B,OAAOC,EAAAA,KAAaC,MAAM,CACxBjB,KAAMgB,EAAAA,KAEHE,QAAQ,4CAAyB,mCACjCjB,WACHT,MAAOwB,EAAAA,KAAaxB,MAAM,wBAAwBS,WAClDR,SAAUuB,EAAAA,KAEPG,IAAI,EAAG,0CACPlB,YAEN,EAEYb,EAAiB,WAC5B,OAAO4B,EAAAA,KAAaC,MAAM,CACxBzB,MAAOwB,EAAAA,KAAaxB,MAAM,wBAAwBS,WAClDR,SAAUuB,EAAAA,KAEPG,IAAI,EAAG,0CACPlB,YAEN,EAEYmB,EAAsB,WACjC,OAAOJ,EAAAA,KAAaC,MAAM,CACxBjB,KAAMgB,EAAAA,KAEHE,QAAQ,4CAAyB,mCACjCjB,WACHoB,OAAQL,EAAAA,KAELG,IAAI,EAAG,2BACPG,IAAI,GAAI,yBACRJ,QACC,+EACA,+BAEDjB,YAEN,C","sources":["components/pages/Login.js","components/phoneBook/UserForm/UserForm.styled.js","redux/auth/validation.js"],"sourcesContent":["import { Heading } from '@chakra-ui/react';\nimport {\n  Buttons,\n  ContactForm,\n  ErrMessage,\n  FieldForm,\n  LabelForm,\n  Wrap,\n} from 'components/phoneBook/UserForm/UserForm.styled';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport { getLoginSchema } from 'redux/auth/validation';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n  const loginSchema = getLoginSchema();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(logIn({ email, password }));\n    toast.success(`Your account ${email} has been found, Login`);\n    resetForm();\n  };\n  return (\n    <>\n      <Heading as=\"h2\" size=\"xl\">\n        Login page\n      </Heading>\n      <Wrap\n        initialValues={{ email: '', password: '' }}\n        validationSchema={loginSchema}\n        onSubmit={handleSubmit}\n      >\n        <ContactForm>\n          <LabelForm>\n            Email\n            <FieldForm name=\"email\" required />\n            <ErrMessage name=\"email\" component=\"p\" />\n          </LabelForm>\n\n          <LabelForm>\n            Password\n            <FieldForm name=\"password\" required />\n            <ErrMessage name=\"password\" component=\"p\" />\n          </LabelForm>\n\n          <Buttons type=\"submit\">Login</Buttons>\n          <Toaster />\n        </ContactForm>\n      </Wrap>\n    </>\n  );\n};\n\nexport default Login;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\n\nexport const ContactForm = styled(Form)`\n  display: flex;\n  flex-flow: column;\n  width: 400px;\n  border: 1px solid #000;\n  border-radius: 12px;\n  padding: 12px;\n`;\nexport const FieldForm = styled(Field)`\n  width: 80%;\n  margin-top: 8px;\n  display: flex;\n  padding: 10px;\n`;\n\nexport const Wrap = styled(Formik)`\n  margin-bottom: 12px;\n`;\nexport const ErrMessage = styled(ErrorMessage)`\n  margin-top: 8px;\n  color: #ff0000;\n`;\nexport const LabelForm = styled.label`\n  margin-bottom: 12px;\n  text-transform: uppercase;\n`;\n\nexport const Buttons = styled.button`\n  width: 50%;\n  padding: 8px 0;\n  cursor: pointer;\n  border: none;\n  border-radius: 12px;\n  background-color: #33ffff;\n  transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background-color: #60e160;\n  }\n`;\n","import * as yup from 'yup';\n\nexport const getRegisterSchema = () => {\n  return yup.object().shape({\n    name: yup\n      .string()\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name should not contain numbers')\n      .required(),\n    email: yup.string().email('Invalid email format').required(),\n    password: yup\n      .string()\n      .min(6, 'Password must be at least 6 characters')\n      .required(),\n  });\n};\n\nexport const getLoginSchema = () => {\n  return yup.object().shape({\n    email: yup.string().email('Invalid email format').required(),\n    password: yup\n      .string()\n      .min(6, 'Password must be at least 6 characters')\n      .required(),\n  });\n};\n\nexport const getCreateFormSchema = () => {\n  return yup.object().shape({\n    name: yup\n      .string()\n      .matches(/^[a-zA-Zа-яА-Я\\s'-]*$/, 'Name should not contain numbers')\n      .required(),\n    number: yup\n      .string()\n      .min(5, 'Too short  phone number')\n      .max(12, 'Too long phone number')\n      .matches(\n        /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n        'Invalid phone number format'\n      )\n      .required(),\n  });\n};\n"],"names":["dispatch","useDispatch","loginSchema","getLoginSchema","as","size","initialValues","email","password","validationSchema","onSubmit","values","resetForm","logIn","toast","name","required","component","type","ContactForm","styled","Form","FieldForm","Field","Wrap","Formik","ErrMessage","ErrorMessage","LabelForm","Buttons","getRegisterSchema","yup","shape","matches","min","getCreateFormSchema","number","max"],"sourceRoot":""}